<%- include('navbar') %>

    <style>
        .form-horizontal {
            background-color: rgb(220, 220, 220);
        }

        /* Media Query for Small Devices (576px and below) */
        @media (max-width: 576px) {
            .form-group {
                margin-bottom: 15px;
                /* Increase margin between form groups */
            }

            .form-horizontal {
                padding: 15px;
                /* Add padding to the form */
            }

            .col-md-4 {
                text-align: left;
                /* Align labels to the left */
            }

            .col-md-6 {
                width: 100%;
                /* Full width for input fields */
            }
        }

        /* Media Query for Medium and Large Devices */
        @media (min-width: 576px) {
            .form-horizontal {
                padding: 50px;
                /* Increase padding for better spacing */
            }
        }

        #imageContainer {
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: space-around;
            flex-wrap: wrap;
        }
    </style>

    <div class="container mt-5">
        <!-- Form Name -->
        <legend class="text-center mb-4 font-weight-bold">Add PRODUCTS</legend>
        <form id="form-add-product" class="form-horizontal mb-5 p-5 border rounded" action="/admin/addProduct"
            method="post" style="min-height: 100vh;" enctype="multipart/form-data">
            <fieldset>

                <!-- Text input-->
                <div class="form-group row">
                    <label class="col-md-4 col-form-label text-md-right" for="product_name">PRODUCT NAME</label>
                    <div class="col-md-6">
                        <input id="product_name" name="product_name" class="form-control" type="text">
                        <label class="col-md-12 text-danger validate-add-product" for="available_quantity"></label>
                    </div>
                </div>

                <!-- Text input-->
                <div class="form-group row">
                    <label class="col-md-4 col-form-label text-md-right" for="product_price">PRODUCT PRICE</label>
                    <div class="col-md-6">
                        <input id="product_price" name="product_price" class="form-control" type="text">
                        <label class="col-md-12 text-danger validate-add-product" for="available_quantity"></label>
                    </div>
                </div>

                <!-- Select Basic -->
                <div class="form-group row">
                    <label class="col-md-4 col-form-label text-md-right" for="product_categorie"> CATEGORY</label>
                    <div class="col-md-6">
                        <select id="product_categorie" name="product_categorie" class="form-control">
                            <option value="" disabled selected>Select a category</option>
                            <% category.forEach((category)=>{ %>
                                <option value="<%= category._id %>">
                                    <%= category.categoryName %>
                                </option>
                                <% }) %>

                        </select>
                        <label class="col-md-12 text-danger validate-add-product" for="available_quantity"></label>
                    </div>
                </div>

                <!-- Text input-->
                <div class="form-group row">
                    <label class="col-md-4 col-form-label text-md-right" for="available_quantity">QUANTITY</label>
                    <div class="col-md-6">
                        <input id="available_quantity" name="available_quantity" class="form-control" type="text">
                        <label class="col-md-12 text-danger validate-add-product" for="available_quantity"></label>
                    </div>
                </div>
                <!-- Text input-->
                <div class="form-group row">
                    <label class="col-md-4 col-form-label text-md-right" for="available_brand">BRAND</label>
                    <div class="col-md-6">
                        <input id="available_brand" name="available_brand" class="form-control" type="text">
                        <label class="col-md-12 text-danger validate-add-product" for="available_brand"></label>
                    </div>
                </div>

                <!-- Textarea -->
                <div class="form-group row">
                    <label class="col-md-4 col-form-label text-md-right" for="product_description">PRODUCT
                        DESCRIPTION</label>
                    <div class="col-md-6">
                        <textarea class="form-control" id="product_description" name="product_description"
                            rows="10"></textarea>
                        <label class="col-md-12 text-danger validate-add-product" for="available_quantity"></label>
                    </div>
                </div>

                <!-- Text input-->
                <div class="form-group row">
                    <label class="col-md-4 col-form-label text-md-right" for="percentage_discount">DISCOUNT</label>
                    <div class="col-md-6">
                        <input id="percentage_discount" name="percentage_discount" class="form-control" type="text">
                        <label class="col-md-12 text-danger validate-add-product" for="available_quantity"></label>
                    </div>
                </div>
                <!-- File Button -->
                <div class="form-group">
                    <label class="col-md-4 control-label" for="product_image">Image</label>
                    <div class="col-md-4">
                        <input id="product-image-upload" name="product_image" class="input-file" type="file"
                            accept="image/png, image/jpeg" multiple>
                        <label class="col-md-12 text-danger validate-add-product" for="available_quantity"></label>
                    </div>
                </div>

                <div class="text-center mt-4">

                    <div class="container mt-4">
                        <div id="imageContainer" class="row">
                            <!-- Image previews will be appended here -->
                        </div>
                    </div>
                </div>
                <!-- Button -->
                <div class="form-group row">
                    <div class="col-md-12 text-center">
                        <button class="btn btn-primary" type="submit">Submit</button>
                        <a href="/admin/products" class="btn btn-danger">Cancel</a>
                    </div>
                </div>

            </fieldset>
        </form>
    </div>

    <!-- Modal for cropping image -->
    <div class="modal fade" id="imageModal" tabindex="1" aria-labelledby="imageModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="imageModalLabel">Crop Image</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <img id="modalImage" src="" class="img-fluid">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" id="cropButton" class="btn btn-primary">Crop</button>
                </div>
            </div>
        </div>
    </div>
    <%- include('footer') %>

        <!-- HTML content (same as your original) -->

        <script>
            const addProductForm = document.getElementById('form-add-product');
            const productName = document.getElementById('product_name');
            const price = document.getElementById('product_price');
            const category = document.getElementById('product_categorie');
            const quantity = document.getElementById('available_quantity');
            const brand = document.getElementById('available_brand');
            const description = document.getElementById('product_description');
            const discount = document.getElementById('percentage_discount');
            const productImage = document.getElementById('product-image-upload');
            const validationMessages = document.getElementsByClassName('validate-add-product');

            addProductForm.addEventListener('submit', async (event) => {
                event.preventDefault();
                // Reset validation messages
                for (let i = 0; i < validationMessages.length; i++) {
                    validationMessages[i].innerHTML = '';
                }

                let validate = true;

                // Validation logic
                if (productName.value.trim() === '' || productName.value.length > 150 || !isNaN(productName.value)) {
                    validationMessages[0].innerHTML = 'Mention product name';
                    validate = false;
                }
                if (price.value > 1000000 || isNaN(price.value) || price.value <= 0) {
                    validationMessages[1].innerHTML = 'Add price';
                    validate = false;
                }
                if (!category.value) {
                    validationMessages[2].innerHTML = 'Select any category';
                    validate = false;
                }
                if (quantity.value > 100000 || isNaN(quantity.value) || quantity.value <= 0) {
                    validationMessages[3].innerHTML = 'Must specify quantity';
                    validate = false;
                }
                if (brand.value.trim() === '' || brand.value.length > 50 || !isNaN(brand.value)) {
                    validationMessages[4].innerHTML = 'Specify the brand name';
                    validate = false;
                }
                if (description.value.trim() === '' || description.value.length > 500 || !isNaN(description.value) || description.value.length < 5) {
                    validationMessages[5].innerHTML = 'Description cannot be empty and must be at least 6 characters';
                    validate = false;
                }
                if (discount.value > 1000000 || isNaN(discount.value) || discount.value <= 0) {
                    validationMessages[6].innerHTML = 'Fill discount field';
                    validate = false;
                }
                if (!productImage.files || productImage.files.length === 0) {
                    validationMessages[7].innerHTML = 'Please select an image';
                    validate = false;
                }
                if (productImage.files.length > 4) {
                    validationMessages[7].innerHTML = 'Do not choose upto 4 images';
                    validate = false;
                }

                if (validate) {
                    addProductForm.submit();
                }
            });

            document.addEventListener('DOMContentLoaded', (event) => {
                const inputImage = document.getElementById('product-image-upload');
                const imageContainer = document.getElementById('imageContainer');
                let cropper;
                let currentImageElement;

                inputImage.addEventListener('change', (event) => {
                    const files = event.target.files;

                    // Check if the number of files exceeds the limit
                    if (files.length > 4 || imageContainer.children.length + files.length > 4) {
                        Swal.fire({
                            icon: "error",
                            title: "File limit reached",
                            text: "Maximum four files can be uploaded",
                            timer: 12000,
                        });
                        return;
                    }

                    for (const file of files) {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            const colDiv = document.createElement('div');
                            colDiv.classList.add('col-md-3', 'mb-3', 'image-container');

                            const img = document.createElement('img');
                            img.src = e.target.result;
                            img.classList.add('img-fluid', 'img-thumbnail', 'image-preview');

                            const openModalButton = document.createElement('button');
                            openModalButton.classList.add('btn', 'btn-primary', 'mt-2', 'me-2');
                            openModalButton.innerText = 'Crop';
                            openModalButton.setAttribute('type', 'button');
                            openModalButton.setAttribute('data-bs-toggle', 'modal');
                            openModalButton.setAttribute('data-bs-target', '#imageModal');
                            openModalButton.addEventListener('click', () => {
                                document.getElementById('modalImage').src = e.target.result;
                                currentImageElement = img;

                                // Initialize Cropper.js with the image
                                if (cropper) {
                                    cropper.destroy();
                                }

                                cropper = new Cropper(document.getElementById('modalImage'), {
                                    aspectRatio: 1,
                                    viewMode: 0,
                                    autoCropArea: 1,
                                });
                            });

                            const deleteButton = document.createElement('button');
                            deleteButton.classList.add('btn', 'btn-danger', 'mt-2', 'ms-2');
                            deleteButton.innerText = 'Delete';
                            deleteButton.addEventListener('click', () => {
                                imageContainer.removeChild(colDiv);
                                updateFileInput();
                            });

                            colDiv.appendChild(img);
                            colDiv.appendChild(openModalButton);
                            colDiv.appendChild(deleteButton);
                            imageContainer.appendChild(colDiv);
                        };
                        reader.readAsDataURL(file);
                    }

                    updateFileInput();
                });

                function cropImage() {
                    if (!cropper) {
                        console.error('Cropper instance is not defined.');
                        return;
                    }

                    const canvas = cropper.getCroppedCanvas();
                    const croppedImage = canvas.toDataURL('image/png');

                    currentImageElement.src = croppedImage;

                    // Close the modal and destroy the cropper instance
                    closeCropModal();
                    updateFileInput();
                }

                function closeCropModal() {
                    const cropModal = document.getElementById('imageModal');
                    const modalInstance = bootstrap.Modal.getInstance(cropModal);
                    modalInstance.hide();  // Properly hide the modal

                    if (cropper) {
                        cropper.destroy();
                        cropper = null;
                    }
                }

                function updateFileInput() {
                    const images = imageContainer.getElementsByClassName('image-preview');
                    const dataTransfer = new DataTransfer();

                    for (let i = 0; i < images.length; i++) {
                        const dataURL = images[i].src;
                        const file = dataURLtoFile(dataURL, 'image' + i + '.png');
                        dataTransfer.items.add(file);
                    }

                    document.getElementById('product-image-upload').files = dataTransfer.files;
                }

                function dataURLtoFile(dataurl, filename) {
                    const arr = dataurl.split(',');
                    const mime = arr[0].match(/:(.*?);/)[1];
                    const bstr = atob(arr[1]);
                    let n = bstr.length;
                    const u8arr = new Uint8Array(n);
                    while (n--) {
                        u8arr[n] = bstr.charCodeAt(n);
                    }
                    return new File([u8arr], filename, { type: mime });
                }

                document.getElementById('cropButton').onclick = cropImage;
                document.getElementById('imageModal').addEventListener('hidden.bs.modal', closeCropModal);
            });
        </script> 4