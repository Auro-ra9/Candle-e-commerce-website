<style>
    .cart-container {
        min-height: 100vh;
    }

    .avatar-lg {
        height: 5rem;
        width: 5rem;
    }

    .font-size-18 {
        font-size: 18px !important;
    }

    .text-truncate {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    a {
        text-decoration: none !important;
    }

    .w-xl {
        min-width: 160px;
    }

    .card {
        margin-bottom: 24px;
        -webkit-box-shadow: 0 2px 3px #e4e8f0;
        box-shadow: 0 2px 3px #e4e8f0;
        position: relative;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-orient: vertical;
        -webkit-box-direction: normal;
        -ms-flex-direction: column;
        flex-direction: column;
        min-width: 0;
        word-wrap: break-word;
        background-color: #fff;
        background-clip: border-box;
        border: 1px solid #eff0f2;
        border-radius: 1rem;
    }

    .nav-borders .nav-link.active {
        color: #0061f2;
        border-bottom-color: #0061f2;
    }

    .nav-borders .nav-link {
        color: #69707a;
        border-bottom-width: 0.125rem;
        border-bottom-style: solid;
        border-bottom-color: transparent;
        padding-top: 0.5rem;
        padding-bottom: 0.5rem;
        padding-left: 0;
        padding-right: 0;
        margin-left: 1rem;
        margin-right: 1rem;
    }

    .empty-cart {
        min-height: 80vh;
        display: flex;
        align-items: center;
        justify-content: center;
    }
</style>

<%- include('navbar') %>
    <div class="container-xl px-4 mt-4">
        <h5 style="font-family: 'Montserrat', sans-serif; display: flex; justify-content: center;">Edit Order</h5>
        <div class="row">
            <div class="container pt-5 cart-container">
                <div class="row">
                    <strong class="card-title">Order ID: <%= order._id %></strong>
                    <div class="col-xl-8">
                        <div class="card border shadow-none">
                            <div class="card-body">
                                <p><strong style="color: #ff6200;">Order placed on:</strong>
                                    <%= order.createdAt.toLocaleString() %>
                                </p>
                                <% order.products.forEach(product=> { %>
                                    <div class="d-flex align-items-start border-bottom pb-3">
                                        <div class="me-4">
                                            <img src="../../<%= product.productImage %>" alt=""
                                                class="avatar-lg rounded">
                                        </div>
                                        <div class="flex-grow-1 align-self-center overflow-hidden">
                                            <h5 class="text-truncate font-size-18">
                                                <a href="/product-view/<%= product.productID._id %>" class="text-dark">
                                                    <%= product.productName %>
                                                </a>
                                            </h5>
                                            <p class="mb-0 mt-1">Brand: <span class="fw-medium">
                                                    <%= product.brand %>
                                                </span></p>
                                            <p class="mb-0 mt-1">Quantity: <span class="fw-medium">
                                                    <%= product.quantity %>
                                                </span></p>
                                            <p class="mb-0 mt-1">Price: <span class="fw-medium">&#8377;<%= product.price
                                                        %></span></p>
                                            <p class="mb-0 mt-1">Discount: <span class="fw-medium">&#8377;<%=
                                                        product.discount %></span></p>
                                        </div>
                                    </div>
                                    <% }); %>
                            </div>
                        </div>
                        <div class="card border shadow-none">
                            <div class="card-body">
                                <div class="alignmnt" style="display: flex; justify-content: space-around;">
                                    <div class="one">
                                        <strong class="card-title">Payment method</strong>
                                        <p>
                                            <%= order.paymentMethod %>
                                        </p>
                                    </div>
                                    <div class="two">
                                        <strong class="card-title">Billing details</strong>
                                        <p>
                                            <%= order.address.homeAddress %>,<br>
                                                <%= order.address.landmark %>,<br>
                                                    <%= order.address.areaAddress %>,<br>
                                                        <%= order.address.pincode %><br>
                                                            <%= order.address.city %>,<br>
                                                                <%= order.address.state %>
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-xl-4">
                        <div class="card border shadow-none">
                            <div class="card-body">
                                <strong class="card-title">Order Summary</strong>
                                <p><strong>Coupon discount:</strong>
                                    <%= order.couponDiscount.toLocaleString() !=0 ? "&#8377;" +
                                        order.couponDiscount.toLocaleString() : "no coupon discount" %>
                                </p>
                                <p><strong>Shipping charges:</strong> &#8377;<%= order.totalPrice < 550 ? "50" : "00" %>
                                </p>
                                <p><strong>Total:</strong> &#8377;<%= order.totalPrice.toLocaleString() %>
                                </p>
                            </div>
                        </div>
                        <div class="card border shadow-none">
                            <div class="card-body">
                                <strong class="card-title">Current status: <div class="badge">
                                        <%= order.orderStatus %>
                                    </div></strong>
                            </div>
                            <% if (order.orderStatus==='Pending-Returned' || order.orderStatus==='Returned' ) { %>
                                <div class="card-body">
                                    <strong class="card-title">Request for return: <div class="text-danger">
                                            <%= order.reasonForRejection %>
                                        </div></strong>
                                </div>
                                <% } %>
                        </div>

                        <% if (order.orderStatus==='Pending-Returned' ) { %>
                            <div class="card border shadow-none">
                                <div class="card-body">
                                    <strong class="card-title">Edit Status:</strong>
                                </div>
                                <div class="card-body">
                                    <button class="btn btn-primary" onclick="approveReturn('<%= order._id %>')">Approve
                                        return</button>
                                    <button class="btn btn-warning" onclick="rejectReturn('<%= order._id %>')">Reject
                                        return</button>
                                </div>
                            </div>

                            <% } else if (order.orderStatus !=='Returned' ) { %>
                                <div class="card border shadow-none">
                                    <div class="card-body">
                                        <strong class="card-title">Edit Order Status</strong>
                                        <form action="/admin/edit-order/<%= order._id %>" method="post"
                                            id="order-status-form">
                                            <div class="mb-3">
                                                <label for="orderStatus" class="form-label">Order Status:</label>
                                                <select name="orderStatus" id="orderStatus" class="form-select">
                                                    <option value="" selected disabled>
                                                        <%= order.orderStatus %>
                                                    </option>
                                                    <option value="Confirmed">Confirmed</option>
                                                    <option value="Shipping">Shipping</option>
                                                    <option value="Delivered">Delivered</option>
                                                </select>
                                            </div>
                                            <input type="hidden" id="currentStatus" name="currentStatus"
                                                value="<%= order.orderStatus %>">
                                            <button type="submit" class="btn btn-success">Change Status</button>
                                        </form>
                                    </div>
                                </div>
                                <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <%- include('footer') %>

        <!-- The Modal for return-request -->
        <div class="modal" id="return-request-modal">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <!-- Modal Header -->
                    <div class="modal-header">
                        <h4 class="modal-title">Reason for Requesting return order</h4>
                    </div>
                    <!-- Modal Body -->
                    <div class="modal-body">
                        <!-- cancellation modal of the user's return cancel copied -->
                        <form id="returnRequestForm" method="post" action="/admin/reject-return">
                            <div class="form-group">
                                <textarea class="form-control" rows="8" id="rejectReason"
                                    name="rejectingReturn"></textarea>
                            </div>
                            <div class="form-group mt-4 text-center">
                                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                                <button type="submit" class="btn btn-success">Save</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <!-- end of the modal -->



        <script>
            //adding different colors according to the order statuys

            const paymentBadge = document.querySelectorAll('.badge')

            paymentBadge.forEach(element => {
                if (element.innerHTML.trim() === 'Pending') {
                    element.classList.add('bg-primary', 'text-white')
                }
                if (element.innerHTML.trim() === 'Confirmed') {
                    element.classList.add('bg-success', 'text-white')
                }
                if (element.innerHTML.trim() === 'Shipping') {
                    element.classList.add('bg-info', 'text-white')
                }
                if (element.innerHTML.trim() === 'Delivered') {
                    element.classList.add('bg-success', 'text-white')
                }
                if (element.innerHTML.trim() === 'Pending-Returned') {
                    element.classList.add('bg-warning', 'text-dark')
                }
                if (element.innerHTML.trim() === 'Returned') {
                    element.classList.add('bg-warning', 'text-dark')
                }
                if (element.innerHTML.trim() === 'Cancelled') {
                    element.classList.add('bg-danger', 'text-white')
                }
            })

            //validating form

            const orderStatusForm = document.getElementById('order-status-form')
            const currentStatusInput = document.getElementById('currentStatus')

            orderStatusForm.addEventListener('submit', async (e) => {
                e.preventDefault();

                // Get selected status from the form
                const selectedStatus = document.getElementById('orderStatus').value
                const currentStatus = currentStatusInput.value

                let validate = true;

                // Perform validation based on currentStatus and selectedStatus
                if (currentStatus === 'Confirmed') {
                    if (selectedStatus === 'Confirmed') {
                        validate = false
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Cannot change status to Confirmed again.',
                        });
                    }
                } else if (currentStatus === 'Shipping') {
                    if (selectedStatus !== 'Delivered') {
                        validate = false
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Order must be Delivered to change from Shipping.',
                        });
                    }
                }
                else if (currentStatus === 'Delivered') {
                    if (selectedStatus !== 'Shipping' || selectedStatus !== 'Confirmed') {
                        validate = false
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Order cannot confirmed or shipped after been delivered.',
                        });
                    }
                }

                // If validation passes, submit the form
                if (validate) {
                    orderStatusForm.submit()
                }
            })

            // Return order approval
            function approveReturn(orderID) {
                Swal.fire({
                    title: 'Are you sure?',
                    text: 'Do you want to approve this request for return?',
                    icon: 'warning',
                    showCancelButton: true,
                }).then((result) => {
                    if (result.isConfirmed) {
                        const URL = `/admin/approve-return/${orderID}`;

                        fetch(URL, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        })
                            .then((res) => {
                                if (res.ok) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Approved return',
                                        showConfirmButton: false,
                                        timer: 900
                                    }).then(() => {
                                        window.location.reload();
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Failed to approve return',
                                        text: 'Please try again later',
                                    });
                                }
                            })
                            .catch((err) => {
                                console.log('Error approving return order', err);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Failed to approve return',
                                    text: 'Please try again later',
                                });
                            });
                    }
                });
            }

            // Function to  return request rejection
            function rejectReturn(orderID) {
                Swal.fire({
                    title: 'Are you sure?',
                    text: 'Do you want to reject this request for return?',
                    icon: 'warning',
                    showCancelButton: true,
                }).then((result) => {
                    if (result.isConfirmed) {
                        //  rejection reason modal
                        var returnRequestModal = new bootstrap.Modal(document.getElementById('return-request-modal'));
                        returnRequestModal.show();

                        document.getElementById('returnRequestForm').action = `/admin/reject-return/${orderID}`;
                    }
                });
            }

            // Function to handle form submission for rejecting return
            const rejectReturnForm = document.getElementById('returnRequestForm');
            rejectReturnForm.addEventListener('submit',(e)=>{
                // form valildation
                const formData = new FormData(rejectReturnForm);
                const URL = form.action;

                fetch(URL, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(Object.fromEntries(formData))
                }).then((res) => {
                    if (res.ok) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Rejected return',
                            showConfirmButton: false,
                            timer: 1500
                        }).then(() => {
                            window.location.reload()
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Failed to reject return',
                            text: 'Please try again later',
                        });
                    }
                }).catch((err) => {
                    console.log('Error rejecting return order', err)
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed to reject return',
                        text: 'Please try again later',
                    })
                })
            })
            


        </script>